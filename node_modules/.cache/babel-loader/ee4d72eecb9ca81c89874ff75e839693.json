{"ast":null,"code":"var _jsxFileName = \"/Users/siabaek/Desktop/\\u1102\\u1169\\u1106\\u1161\\u1103\\u1173\\u110F\\u1169\\u1103\\u1165/react-masterclass/src/routes/Chart.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chart(_ref) {\n  _s();\n\n  let {\n    coinId\n  } = _ref;\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId), {\n    refetchInterval: 10000\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading chart...\" : /*#__PURE__*/_jsxDEV(ApexChart, {\n      type: \"candlestick\",\n      series: [{\n        x: data === null || data === void 0 ? void 0 : data.map(price => price.time_close),\n        y: [data === null || data === void 0 ? void 0 : data.map(price => price.open), data === null || data === void 0 ? void 0 : data.map(price => price.high), data === null || data === void 0 ? void 0 : data.map(price => price.low), data === null || data === void 0 ? void 0 : data.map(price => price.close)]\n      }],\n      options: {\n        theme: {\n          mode: \"dark\"\n        },\n        chart: {\n          type: \"candlestick\",\n          height: 300,\n          width: 500,\n          toolbar: {\n            show: false\n          },\n          background: \"transparent\"\n        },\n        grid: {\n          show: false\n        },\n        stroke: {\n          curve: \"smooth\",\n          width: 4\n        },\n        yaxis: {\n          show: false\n        },\n        xaxis: {\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: true\n          },\n          type: \"datetime\",\n          categories: data === null || data === void 0 ? void 0 : data.map(price => price.time_close)\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            gradientToColors: [\"#0be881\"],\n            stops: [0, 100]\n          }\n        },\n        colors: [\"#0fbcf9\"],\n        tooltip: {\n          y: {\n            formatter: value => `$${value.toFixed(2)}`\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chart, \"3/UYpjJNObciauUid8uIQ//UcYY=\", false, function () {\n  return [useQuery];\n});\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/siabaek/Desktop/노마드코더/react-masterclass/src/routes/Chart.tsx"],"names":["useQuery","fetchCoinHistory","ApexChart","Chart","coinId","isLoading","data","refetchInterval","x","map","price","time_close","y","open","high","low","close","theme","mode","chart","type","height","width","toolbar","show","background","grid","stroke","curve","yaxis","xaxis","axisBorder","axisTicks","labels","categories","fill","gradient","gradientToColors","stops","colors","tooltip","formatter","value","toFixed"],"mappings":"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","sourcesContent":["import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\n\ninterface ChartProps {\n  coinId: string;\n}\n\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\nfunction Chart({ coinId }: ChartProps) {\n  const { isLoading, data } = useQuery<IHistorical[]>(\n    [\"ohlcv\", coinId],\n    () => fetchCoinHistory(coinId),\n    { refetchInterval: 10000 }\n  );\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading chart...\"\n      ) : (\n        <ApexChart\n          type=\"candlestick\"\n          series={[\n            {\n              x: data?.map((price) => price.time_close),\n              y: [\n                data?.map((price) => price.open),\n                data?.map((price) => price.high),\n                data?.map((price) => price.low),\n                data?.map((price) => price.close),\n              ],\n            },\n          ]}\n          options={{\n            theme: {\n              mode: \"dark\",\n            },\n            chart: {\n              type: \"candlestick\",\n              height: 300,\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n              background: \"transparent\",\n            },\n            grid: { show: false },\n            stroke: {\n              curve: \"smooth\",\n              width: 4,\n            },\n            yaxis: {\n              show: false,\n            },\n            xaxis: {\n              axisBorder: { show: false },\n              axisTicks: { show: false },\n              labels: { show: true },\n              type: \"datetime\",\n              categories: data?.map((price) => price.time_close),\n            },\n            fill: {\n              type: \"gradient\",\n              gradient: { gradientToColors: [\"#0be881\"], stops: [0, 100] },\n            },\n            colors: [\"#0fbcf9\"],\n            tooltip: {\n              y: {\n                formatter: (value) => `$${value.toFixed(2)}`,\n              },\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}