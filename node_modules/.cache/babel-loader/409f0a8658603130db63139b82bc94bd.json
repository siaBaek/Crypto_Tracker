{"ast":null,"code":"var _jsxFileName = \"/Users/siabaek/Desktop/\\u1102\\u1169\\u1106\\u1161\\u1103\\u1173\\u110F\\u1169\\u1103\\u1165/react-masterclass/src/routes/Price.tsx\",\n    _s = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Price() {\n  _s();\n\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId), {\n    refetchInterval: 5000\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading price..\" : /*#__PURE__*/_jsxDEV(PriceList, {\n      children: data === null || data === void 0 ? void 0 : data.slice(0, 100).map(coin => /*#__PURE__*/_jsxDEV(Price, {}, coin.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Price, \"3/UYpjJNObciauUid8uIQ//UcYY=\", true);\n\n_c = Price;\nexport default Price;\n\nvar _c;\n\n$RefreshReg$(_c, \"Price\");","map":{"version":3,"sources":["/Users/siabaek/Desktop/노마드코더/react-masterclass/src/routes/Price.tsx"],"names":["Price","isLoading","data","useQuery","coinId","fetchCoinHistory","refetchInterval","slice","map","coin","id"],"mappings":";;;;;AAAA,SAASA,KAAT,GAAiB;AAAA;;AACf,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAsBC,QAAQ,CAClC,CAAC,OAAD,EAAUC,MAAV,CADkC,EAElC,MAAMC,gBAAgB,CAACD,MAAD,CAFY,EAGlC;AAAEE,IAAAA,eAAe,EAAE;AAAnB,GAHkC,CAApC;AAKA,sBACE;AAAA,cACGL,SAAS,GACR,iBADQ,gBAGR,QAAC,SAAD;AAAA,gBACGC,IADH,aACGA,IADH,uBACGA,IAAI,CAAEK,KAAN,CAAY,CAAZ,EAAe,GAAf,EAAoBC,GAApB,CAAyBC,IAAD,iBACvB,QAAC,KAAD,MAAYA,IAAI,CAACC,EAAjB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAnBQV,K;;KAAAA,K;AAoBT,eAAeA,KAAf","sourcesContent":["function Price() {\n  const { isLoading, data } = useQuery<IHistorical[]>(\n    [\"ohlcv\", coinId],\n    () => fetchCoinHistory(coinId),\n    { refetchInterval: 5000 }\n  );\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading price..\"\n      ) : (\n        <PriceList>\n          {data?.slice(0, 100).map((coin) => (\n            <Price key={coin.id}></Price>\n          ))}\n        </PriceList>\n      )}\n    </div>\n  );\n}\nexport default Price;\n"]},"metadata":{},"sourceType":"module"}